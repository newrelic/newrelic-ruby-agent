name: Scheduled Continuous Integration

on:
  push:
    branches:
      - main
      - dev
  schedule:
    - cron:  '0 9 * * *'

jobs:
  run_rubocop:
    runs-on: ubuntu-22.04
    steps:
      - name: Configure git
        run: 'git config --global init.defaultBranch main'
      - uses: actions/checkout@v3
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
      - run: bundle
      - run: rubocop

  unit_tests:
    needs: run_rubocop
    runs-on: ubuntu-22.04
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        ports:
          - "3306:3306"
    strategy:
      fail-fast: false
      matrix:
        ruby-version: [2.2.10, 2.3.8, 2.4.10, 2.5.9, 2.6.10, 2.7.6, 3.0.4, 3.1.2, 3.2.0-preview2, jruby-9.3.8.0]

    steps:
      - name: Configure git
        run: 'git config --global init.defaultBranch main'
      - uses: actions/checkout@v3

        # - curl is needed for Curb
        # - xslt is needed for older Nokogiris, RUBY_VERSION < 2.5
        # - sasl is needed for memcached
      - name: Install OS packages
        run: sudo apt-get update; sudo apt-get install -y --no-install-recommends libcurl4-nss-dev libsasl2-dev libxslt1-dev

      - name: Install Ruby ${{ matrix.ruby-version }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}

      - name: Set up mini-envs for ruby version
        uses: kanga333/variable-mapper@master
        with:
          key: ${{ matrix.ruby-version }}
          map: |
            {
              "2.2.10": {
                "rails": "norails,rails41,rails40,rails32"
              },
              "2.3.8": {
                "rails": "norails,rails52,rails51,rails42,rails41,rails40,rails32"
              },
              "2.4.10": {
                "rails": "norails,rails52,rails51,rails42,rails32"
              },
              "2.5.9": {
                "rails": "norails,rails61,rails60,rails52,rails51,rails42"
              },
              "2.6.10": {
                "rails": "norails,rails61,rails60,rails52,rails51,rails42"
              },
              "2.7.6": {
                "rails": "norails,rails61,rails60,rails70,railsedge"
              },
              "3.0.4": {
                "rails": "norails,rails61,rails60,rails70,railsedge"
              },
              "3.1.2": {
                "rails": "norails,rails61,rails70,railsedge"
              },
              "3.2.0-preview2": {
                "rails": "norails,rails61,rails70,railsedge"
              },
              "jruby-9.3.8.0": {
                "rails": "norails,rails61,rails60,rails52,rails51,rails50,rails42"
              }
            }

      - if: matrix.ruby-version == '2.2.10' || matrix.ruby-version == '2.3.8' || matrix.ruby-version == '2.4.10' || matrix.ruby-version == '2.5.9' || matrix.ruby-version == '2.6.10' || matrix.ruby-version == 'jruby-9.3.8.0'
        name: Cache mysql55
        id: mysql55-cache
        uses: john-shaffer/cache@sudo-tar
        with:
          path: /usr/local/mysql55
          key: mysql55-install

      - if: steps.mysql55-cache.outputs.cache-hit != 'true' && ( matrix.ruby-version == '2.2.10' || matrix.ruby-version == '2.3.8' || matrix.ruby-version == '2.4.10' || matrix.ruby-version == '2.5.9' || matrix.ruby-version == '2.6.10' || matrix.ruby-version == 'jruby-9.3.8.0')
        name: Install mysql55
        run: sudo ./test/script/install_mysql55

      - name: Setup bundler
        run: ./.github/workflows/scripts/setup_bundler
        env:
          RUBY_VERSION: ${{ matrix.ruby-version }}
          RAILS_VERSION: ${{ env.rails }}

      - name: Run Unit Tests
        uses: nick-invision/retry@v1.0.0
        with:
          timeout_minutes: 30
          max_attempts: 2
          command:  bundle exec rake test:env[${{ env.rails }}] TESTOPTS="--verbose"
        env:
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
          JRUBY_OPTS: --dev

  multiverse:
    needs: run_rubocop
    runs-on: ubuntu-22.04
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        ports:
          - 3306
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USERNAME: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mongodb:
        image: ${{ contains(fromJson('["2.2.10", "2.3.8", "2.4.10"]'), matrix.ruby-version) && 'mongo:5.0.11' || 'mongo:latest' }}
        ports:
          - 27017:27017
      rabbitmq:
        image: rabbitmq:latest
        ports:
          - 5672:5672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q check_port_connectivity"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      memcached:
        image: memcached:latest
        ports:
          - 11211:11211
        options: >-
          --health-cmd "timeout 5 bash -c 'cat < /dev/null > /dev/udp/127.0.0.1/11211'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      fail-fast: false
      matrix:
        multiverse: [agent, background, background_2, database, frameworks, httpclients, httpclients_2, rails, rest]
        ruby-version: [2.2.10, 2.3.8, 2.4.10, 2.5.9, 2.6.10, 2.7.6, 3.0.4, 3.1.2, 3.2.0-preview2]
    steps:
      - name: Configure git
        run: 'git config --global init.defaultBranch main'
      - uses: actions/checkout@v3

        # - curl is needed for Curb
        # - xslt is needed for older Nokogiris, RUBY_VERSION < 2.5
        # - sasl is needed for memcached
      - name: Install OS packages
        run: sudo apt-get update; sudo apt-get install -y --no-install-recommends libcurl4-nss-dev libsasl2-dev libxslt1-dev

      - name: Install Ruby ${{ matrix.ruby-version }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}

      - if: matrix.ruby-version == '2.2.10' || matrix.ruby-version == '2.3.8'
        name: Cache mysql55
        id: mysql55-cache
        uses: john-shaffer/cache@sudo-tar
        with:
          path: /usr/local/mysql55
          key: mysql55-install

      - if: steps.mysql55-cache.outputs.cache-hit != 'true' && ( matrix.ruby-version == '2.2.10' || matrix.ruby-version == '2.3.8')
        name: Install mysql55
        run: sudo ./test/script/install_mysql55

      - name: Setup bundler
        run: ./.github/workflows/scripts/setup_bundler_multiverse
        env:
          RUBY_VERSION: ${{ matrix.ruby-version }}

      - name: Test MySQL
        run: mysql --host 127.0.0.1 --port ${{ job.services.mysql.ports[3306] }} -uroot -proot -e "SHOW GRANTS FOR 'root'@'localhost'"

      - name: Run Multiverse Tests
        uses: nick-invision/retry@v1.0.0
        with:
          timeout_minutes: 60
          max_attempts: 2
          command:  bundle exec rake test:multiverse[group="${{ matrix.multiverse }}",verbose]
        env:
          DB_PASSWORD: root
          MYSQL_PASSWORD: root
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
          MYSQL_PORT: ${{ job.services.mysql.ports[3306] }}
          MYSQL_HOST: 127.0.0.1
          POSTGRES_USERNAME: postgres
          POSTGRES_PASSWORD: password
          SERIALIZE: 1

      - name: Annotate errors
        if: ${{ failure() }}
        uses: ./.github/actions/annotate

  infinite_tracing:
    needs: run_rubocop
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        ruby-version: [2.5.9, 2.6.10, 2.7.6, 3.0.4, 3.1.2, 3.2.0-preview2]
    steps:
      - name: Configure git
        run: 'git config --global init.defaultBranch main'
      - uses: actions/checkout@v3

      - name: Install Ruby ${{ matrix.ruby-version }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}

      - name: Bundle
        run: bundle install

      - name: Run Multiverse Tests
        uses: nick-invision/retry@v1.0.0
        with:
          timeout_minutes: 15
          max_attempts: 2
          command:  bundle exec rake test:multiverse[group=infinite_tracing,verbose]
        env:
          SERIALIZE: 1

      - name: Annotate errors
        if: ${{ failure() }}
        uses: ./.github/actions/annotate

  jruby_multiverse:
    needs: run_rubocop
    runs-on: ubuntu-22.04
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        ports:
          - "3306:3306"
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mongodb:
        image: mongo:5.0.11
        ports:
          - 27017:27017
      rabbitmq:
        image: rabbitmq:latest
        ports:
          - 5672:5672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q check_port_connectivity"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      memcached:
        image: memcached:latest
        ports:
          - 11211:11211
        options: >-
          --health-cmd "timeout 5 bash -c 'cat < /dev/null > /dev/udp/127.0.0.1/11211'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      fail-fast: false
      matrix:
        multiverse: [agent, background, background_2, database, frameworks, httpclients, httpclients_2, rails, rest]
    steps:
      - name: Set the default Java version
        run: sudo update-alternatives --set java ${JAVA_HOME_8_X64}/bin/java &&
             sudo update-alternatives --set javac ${JAVA_HOME_8_X64}/bin/javac &&
             java -version &&
             javac -version

      - name: Configure git
        run: 'git config --global init.defaultBranch main'

      - name: Check out the source code
        uses: actions/checkout@v3

      - name: Install JRuby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: jruby-9.3.8.0
        env:
          JAVA_HOME: /usr/lib/jvm/temurin-8-jdk-amd64

      - name: Bundle
        run: bundle install
        env:
          JAVA_HOME: /usr/lib/jvm/temurin-8-jdk-amd64

      - name: Run Multiverse Tests
        uses: nick-invision/retry@v1.0.0
        with:
          timeout_minutes: 60
          max_attempts: 1
          command:  jruby -v; bundle exec rake test:multiverse[group=${{ matrix.multiverse }},verbose]
        env:
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
          SERIALIZE: 1
          JRUBY_OPTS: --dev
          JAVA_HOME: /usr/lib/jvm/temurin-8-jdk-amd64

      - name: Annotate errors
        if: ${{ failure() }}
        uses: ./.github/actions/annotate

  notify_slack_fail:
    name: Notify slack fail
    needs: [unit_tests, multiverse, infinite_tracing, jruby_multiverse]
    runs-on: ubuntu-22.04
    if: always()
    steps:
      - uses: technote-space/workflow-conclusion-action@v3
      - uses: voxmedia/github-action-slack-notify-build@v1
        if: env.WORKFLOW_CONCLUSION == 'failure'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.RUBY_GITHUB_ACTIONS_BOT_WEBHOOK }}
        with:
          channel: ruby-agent-notifications
          status: FAILED
          color: danger

  notify_slack_success:
    name: Notify slack success
    needs: [unit_tests, multiverse, infinite_tracing, jruby_multiverse]
    runs-on: ubuntu-22.04
    if: always()
    steps:
      - uses: technote-space/workflow-conclusion-action@v3
      - uses: Mercymeilya/last-workflow-status@v0.3.2
        id: last_status
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: voxmedia/github-action-slack-notify-build@v1
        if: ${{ env.WORKFLOW_CONCLUSION == 'success' && steps.last_status.outputs.last_status == 'failure' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.RUBY_GITHUB_ACTIONS_BOT_WEBHOOK }}
        with:
          channel: ruby-agent-notifications
          status: SUCCESS
          color: good
