#!/bin/bash
# This script sets up the bundler versions we need for our older unit tests
# and sets up the bundler config for when we are using the older mysql version

echo "DEBUG: RAILS_VERSION = $RAILS_VERSION"
if [[ $RAILS_VERSION =~ .*"4".* ]]; then 
  # Older rubies come with older Rubygems and we need 3.0.6 minimum to
  # correctly install Bundler and do anything else within the multiverse test suite
  # Ruby 2.2 and 2.3 need to use update_rubygems,
  # newer Rubies can use 'gem update --system'
  if [[ $RUBY_VERSION = "2.2.10" || $RUBY_VERSION = "2.3.8" ]]; then
    if [[ $RUBY_VERSION = "2.2.10" ]]; then
      ru_version=2.7.11
    else
      ru_version=3.0.6
    fi
    echo "DEBUG: installing rubygems-update version $ru_version"
    gem install rubygems-update:$ru_version
    echo "DEBUG: running 'rubygems-update'"
    update_rubygems
  else
    echo "DEBUG: running 'gem update --system --force'"
    gem update --system --force
  fi
  echo "DEBUG: obtaining pre-installed Bundler version"
  og_bundler=$(bundle --version | awk '{ print $3 }')
  echo "DEBUG: pre-installed Bundler version is $og_bundler"
  if [[ "$og_bundler" != "1.17.3" ]]; then
    # need to use bundler <2 for all rails 4 and below tests
    echo "DEBUG: running 'gem install bundler'"
    gem install --default bundler:1.17.3 --force
    echo "DEBUG: running 'gem list bundler'"
    gem list bundler
    echo "DEBUG: RUBY_VERSION = $RUBY_VERSION"
    if [[ $RUBY_VERSION != "2.2.10" ]]; then 
      echo "DEBUG: running 'gem uninstall bundler'"
      gem uninstall bundler
      echo "DEBUG: running 'gem list bundler' again"
      gem list bundler
    fi
  fi
  # add mysql specific config for bundler when we are using older mysql
  echo "DEBUG: running 'bundle config'"
  bundle config --global build.mysql2 --with-mysql-config=/usr/local/mysql55/bin/mysql_config
fi
echo "DEBUG: running 'bundle install'"
bundle install
