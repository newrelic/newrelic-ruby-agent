#!/bin/bash
# This script sets up the bundler versions we need for our older unit tests
# and sets up the bundler config for when we are using the older mysql version

function using_jruby {
  # example RUBY_VERSION strings: '3.1.3', 'jruby-9.4.0.0'
  [[ $RUBY_VERSION =~ ^jruby ]]
}

function using_old_rails {
  # example RAILS_VERSION string:
  #   'norails,rails61,rails60,rails52,rails51,rails50,rails42'
  echo "DEBUG: RAILS_VERSION = $RAILS_VERSION"
  [[ $RAILS_VERSION =~ .*"4".* ]]
}

function using_old_ruby {
  # example RUBY_VERSION strings:
  #   '2.4.10' => true, starts with "2", next digit is not a "6" or "7"
  #   '2.7.7'  => false, starts with "2", next digit is "7"
  #   '3.1.3'  => false, does not start with "2"
  echo "DEBUG: RUBY_VERSION = $RUBY_VERSION"
  [[ $RUBY_VERSION =~ ^2\.[^67] ]]
}

function update_to_desired_rubygems_version {
  # Older rubies come with older Rubygems and we need 3.0.6 to
  # correctly install Bundler 1.17 for the multiverse test suite
  # Rubies < 2.3 need to use update_rubygems,
  # newer Rubies can use 'gem update --system'
  if [[ $RUBY_VERSION =~ ^2\.[^7] ]]; then
    echo "DEBUG: running 'gem update --system 3.0.6 --force'"
    gem update --system 3.0.6 --force >/dev/null
  elif [[ $RUBY_VERSION = '3.5.0preview1' ]]; then
    echo "DEBUG: running 'gem update --system 3.7.0.dev --force'"
    gem update --system 3.7.0.dev --force >/dev/null
  else
    echo "DEBUG: running 'gem update --system 3.4.1 --force'"
    gem update --system 3.4.1 --force >/dev/null
  fi
  echo "DEBUG: Rubygems version installed: $(gem --version)"
}

function install_desired_bundler_version {
  echo "DEBUG: obtaining pre-installed Bundler version"
  og_bundler=$(bundle --version | awk '{ print $3 }')
  echo "DEBUG: pre-installed Bundler version is $og_bundler"
  if [[ "$og_bundler" = "1.17.3" ]]; then
    return
  fi
  # need to use bundler <2 for all rails 4 and below tests
  echo "DEBUG: running 'gem install bundler'"
  gem install --default bundler:1.17.3 --force
  echo "DEBUG: running 'gem list bundler'"
  gem list bundler
  echo "DEBUG: RUBY_VERSION = $RUBY_VERSION"
  echo "DEBUG: running 'gem uninstall bundler'"
  gem uninstall bundler
  echo "DEBUG: running 'gem list bundler' again"
  gem list bundler
}

function configure_bundler {
  if ! [[ $RUBY_VERSION =~ ^2\.4 ]]; then
    echo "DEBUG: Ruby is not at version 2.4.x, skipping 'bundler config'"
    return
  fi

  # add mysql specific config for bundler when we are using older mysql
  echo "DEBUG: running 'bundle config'"
  bundle config --global build.mysql2 --with-mysql-config=/usr/local/mysql55/bin/mysql_config
}

function install_ruby_version_specific_gems {
  if using_jruby; then
    echo "DEBUG: Skipping specific gem installation, as JRuby is in use"
    return
  fi

    echo "DEBUG: running 'gem install' on specific gem versions"
    # The doubles below are needed for older Ruby versions, since the newer one won't install on the older Ruby versions
    gem install --default cgi:0.5.0
    gem install --default date:3.4.1
    gem install --default digest:3.1.0
    gem install --default digest:3.2.0
    gem install --default erb:4.0.4
    gem install --default erb:5.0.1
    gem install --default logger:1.7.0
    # gem list logger
    # gem install logger
    gem --version
    gem install --default securerandom:0.3.2
    gem install --default securerandom:0.4.1
    gem install --default set:1.1.2
    gem install --default strscan:3.0.4
    gem install --default strscan:3.1.5

    echo "DEBUG: Completed installing gems"

}

function set_up_bundler {
  if using_jruby; then
    echo "DEBUG: Skipping Bundler setup, as JRuby is in use"
    return
  fi

  update_to_desired_rubygems_version
  install_desired_bundler_version
  configure_bundler
}

echo "DEBUG: setting up Bundler"
set_up_bundler

echo "DEBUG: running 'bundle install'"
bundle install

echo "DEBUG: installing Ruby version specific gems"
install_ruby_version_specific_gems
