require File.expand_path(File.join(File.dirname(__FILE__), "..", "..", "..", "helpers", "docker"))

if RUBY_VERSION >= '2.6.0'
  gemfile <<-RB
    gem 'mongo'
    gem 'bson'
  RB
end

# Mongo gem versions <= 1.7.1 are not supported and never will be.
# We have tests to assert unsupported versions of MongoDB, hence the reason they
# appear in these lists

# Mongo versions to test with Ruby 2.6+
MONGO_VERSIONS_RUBY26 = ['2.17.0']

# Mongo versions to test with Ruby 2.5+
MONGO_VERSIONS_RUBY25 = ['2.15.1',
                         '2.14.0',
                         '2.12.0']

# TODO: MAJOR VERSION - Stop testing mongo versions below 2.5.0
# Mongo versions to test with CRubies below 2.5.0
MONGO_VERSIONS_OLDER_RUBIES = ['2.9.0',
                               '2.7.0',
                               '2.5.0',
                               '2.4.0',
                               '2.1.0',
                               '2.0.0',
                               '1.9.2',
                               '1.8.6']

# The highest Mongo server version to test 1.x gems against
MAX_SERVER_VERSION_FOR_1X_GEMS = 2.6

# * JRuby uses Mongo gem versions for v2.6.0+ Ruby only
# * Newer CRubies use newer Mongo gem versions and older ones
# * Older CRubies use older Mongo gem versions
def mongo_versions
  versions = []
  versions += MONGO_VERSIONS_RUBY26 if ruby_gte?('2.6.0')
  return versions if RUBY_PLATFORM.eql?('java')

  if ruby_gte?('2.5.0')
    versions += MONGO_VERSIONS_RUBY25
  else
    versions += MONGO_VERSIONS_OLDER_RUBIES
  end
  versions
end

def ruby_gte?(version)
  Gem::Version.new(RUBY_VERSION) >= Gem::Version.new(version)
end

def installed_mongo_server_version
  @mongo_server_version ||= docker? ? 5.0 : `mongo --version`.scan(/version\sv([\d\.]+)/).join.to_f
end

mongo_versions.each do |mongo_version|
  next if mongo_version.start_with?('1.') && installed_mongo_server_version > MAX_SERVER_VERSION_FOR_1X_GEMS

  if Gem::Version.new(mongo_version) >= Gem::Version.new("2.12.0")
    gemfile <<-RB
      gem 'mongo', '~> #{mongo_version}'
      gem 'bson', '~> 4.14'
    RB
  else
    gemfile <<-RB
      gem 'mongo', '~> #{mongo_version}'
      gem 'bson', '< 4.8'
    RB
  end
end

require 'timeout'
require 'socket'

class PreExistingMongo
  attr_reader :host, :port

  def initialize(host, port)
    @host = host
    @port = port
  end

  def stop(*_)
  end
end

def mongo_host
  docker? ? 'mongodb' : '127.0.0.1'
end

$mongo = PreExistingMongo.new(mongo_host, 27017)

def mongo_running?
  return true if docker?

  Timeout::timeout(1) do
    begin
      TCPSocket.new($mongo.host, $mongo.port).close
      true
    rescue Errno::ECONNREFUSED, Errno::EHOSTUNREACH
      false
    end
  end
rescue Timeout::Error
  false
end

before_suite do
  if !mongo_running?
    require File.join(File.dirname(__FILE__), 'helpers', 'mongo_server')
    $mongo = MongoServer.new
    $mongo.start(false)
  end
end

after_suite do
  $mongo.stop
end

# vim: ft=ruby
